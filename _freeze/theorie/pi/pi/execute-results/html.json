{
  "hash": "6f958b0c93e6ccb13da2f7232222a192",
  "result": {
    "markdown": "---\ntitle: \"Problèmes intégrateurs\"\nauthor: \"Jérôme Soucy\"\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n    toc: true\n    toc-depth: 2\n    number-sections: false\n    highlight-style: github\n    code-fold: true\n    warning: false\n    message: false\n---\n\n\n## Le problème du ballon météorologique\n\nUn ballon est lancé verticalement vers le haut avec une vitesse initiale de 10 m/s. En tenant compte de la résistance de l'air, sa hauteur (en mètres) après $t$ secondes est donnée par la fonction :\n\n$$h(t) = 50\\ln(\\cosh(0.2t)) + 10t - 4.9t^2$$\n\nÀ quel moment le ballon atteint-il son altitude maximale ?\n\n### 1. Visualisation du problème\n\nCommençons par visualiser la hauteur du ballon en fonction du temps :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Fonction hauteur\nh <- function(t) {\n  50 * log(cosh(0.2 * t)) + 10 * t - 4.9 * t^2\n}\n\n# Création des données\nt_vals <- seq(0, 3, by = 0.01)\nheight_data <- data.frame(\n  t = t_vals,\n  height = sapply(t_vals, h)\n)\n\n# Graphique\nggplot(height_data, aes(x = t, y = height)) +\n  geom_line(color = \"blue\", size = 1) +\n  labs(x = \"Temps (s)\", y = \"Hauteur (m)\") +\n  theme_minimal() +\n  ggtitle(\"Trajectoire du ballon\")\n```\n\n::: {.cell-output-display}\n![Hauteur du ballon en fonction du temps](pi_files/figure-html/fig-hauteur-1.png){#fig-hauteur width=672}\n:::\n:::\n\n\n### 2. La vitesse du ballon\n\nLa vitesse est la dérivée de la hauteur. Pour trouver le point culminant, nous devons trouver quand la vitesse est nulle.\n\n$$v(t) = h'(t) = 10\\tanh(0.2t) + 10 - 9.8t$$\n\nVisualisons la vitesse :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fonction vitesse\nv <- function(t) {\n  10 * tanh(0.2 * t) + 10 - 9.8 * t\n}\n\n# Création des données\nvelocity_data <- data.frame(\n  t = t_vals,\n  velocity = sapply(t_vals, v)\n)\n\n# Graphique\nggplot(velocity_data, aes(x = t, y = velocity)) +\n  geom_line(color = \"red\", size = 1) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  labs(x = \"Temps (s)\", y = \"Vitesse (m/s)\") +\n  theme_minimal() +\n  ggtitle(\"Vitesse du ballon\")\n```\n\n::: {.cell-output-display}\n![Vitesse du ballon en fonction du temps](pi_files/figure-html/fig-vitesse-1.png){#fig-vitesse width=672}\n:::\n:::\n\n\n### 3. Méthode de Newton-Raphson\n\nPour trouver quand la vitesse est nulle, nous devons résoudre :\n$$f(t) = 10\\tanh(0.2t) + 10 - 9.8t = 0$$\n\nLa dérivée de cette fonction est :\n$$f'(t) = 2\\,\\text{sech}^2(0.2t) - 9.8$$\n\nImplémentons la méthode de Newton-Raphson :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fonction f(t) et sa dérivée\nf <- function(t) {\n  10 * tanh(0.2 * t) + 10 - 9.8 * t\n}\n\nf_prime <- function(t) {\n  2 * (1 / cosh(0.2 * t))^2 - 9.8\n}\n\n# Fonction Newton-Raphson\nnewton_raphson <- function(x0, tolerance = 1e-6, max_iter = 100) {\n  x <- x0\n  iterations <- data.frame(\n    iteration = 0,\n    x = x0,\n    f_x = f(x0)\n  )\n  \n  for (i in 1:max_iter) {\n    x_new <- x - f(x) / f_prime(x)\n    \n    iterations <- rbind(iterations, \n                       data.frame(iteration = i,\n                                x = x_new,\n                                f_x = f(x_new)))\n    \n    if (abs(x_new - x) < tolerance) {\n      break\n    }\n    x <- x_new\n  }\n  \n  return(iterations)\n}\n\n# Application avec x0 = 1\nresultats <- newton_raphson(1)\n\n# Affichage des résultats\nknitr::kable(resultats,\n             col.names = c(\"Itération\", \"t (secondes)\", \"f(t)\"),\n             digits = 6,\n             caption = \"Résultats de la méthode de Newton-Raphson\")\n```\n\n::: {.cell-output-display}\nTable: Résultats de la méthode de Newton-Raphson\n\n| Itération| t (secondes)|      f(t)|\n|---------:|------------:|---------:|\n|         0|     1.000000|  2.173753|\n|         1|     1.275930| -0.006241|\n|         2|     1.275143|  0.000000|\n|         3|     1.275143|  0.000000|\n:::\n:::\n\n\n### 4. Vérification graphique\n\nVisualisons la convergence sur le graphique de la vitesse :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filtrer les données pour l'intervalle [1, 1.5]\nvelocity_data_zoom <- velocity_data %>% \n  filter(t >= 1 & t <= 1.5)\n\n# Ajout des points d'itération au graphique de vitesse avec zoom\nggplot(velocity_data_zoom, aes(x = t, y = velocity)) +\n  geom_line(color = \"red\", size = 1) +\n  geom_hline(yintercept = 0, linetype = \"dashed\") +\n  geom_point(data = resultats, \n             aes(x = x, y = f_x),\n             color = \"blue\",\n             size = 3) +\n  geom_path(data = resultats, \n            aes(x = x, y = f_x),\n            color = \"blue\",\n            arrow = arrow(length = unit(0.2, \"cm\")),\n            size = 0.5) +\n  labs(x = \"Temps (s)\", y = \"Vitesse (m/s)\") +\n  scale_x_continuous(limits = c(1, 1.5),\n                    breaks = seq(1, 1.5, 0.1)) +\n  theme_minimal() +\n  ggtitle(\"Convergence de la méthode de Newton-Raphson (zoom)\") +\n  theme(axis.text = element_text(size = 10),\n        axis.title = element_text(size = 12))\n```\n\n::: {.cell-output-display}\n![Convergence de la méthode de Newton-Raphson](pi_files/figure-html/fig-convergence-1.png){#fig-convergence width=672}\n:::\n:::\n\n\n### Conclusion\n\nLa méthode de Newton-Raphson converge rapidement vers la solution : le ballon atteint son altitude maximale après environ 1.275 secondes.\n\nÀ cet instant, l'altitude du ballon est de 6.39 mètres.",
    "supporting": [
      "pi_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}